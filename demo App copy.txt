import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  PermissionsAndroid,
  Platform,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  SafeAreaView,
  Dimensions,
} from 'react-native';
import RNBluetoothClassic, { BluetoothDevice } from 'react-native-bluetooth-classic';
import { VictoryLine, VictoryChart, VictoryTheme } from 'victory-native';

const { width, height } = Dimensions.get('window');

const App = () => {
  const [devices, setDevices] = useState<BluetoothDevice[]>([]);
  const [paired, setPaired] = useState<BluetoothDevice[]>([]);
  const [selectedDevice, setSelectedDevice] = useState<BluetoothDevice>();
  const [isConnected, setIsConnected] = useState(false);
  const [scanning, setScanning] = useState(false);
  const [azimuthData, setAzimuthData] = useState<number[]>([]);
  const [bearingData, setBearingData] = useState<number[]>([]);
  const maxDataPoints = 100; // Maximum number of data points to keep
  const downsampleFactor = 5; // Downsampling factor

  const checkBluetoothEnabled = async () => {
    try {
      const enabled = await RNBluetoothClassic.isBluetoothEnabled();
      if (!enabled) {
        await RNBluetoothClassic.requestBluetoothEnabled();
      }
    } catch (error) {
      console.error('Bluetooth Classic is not available on this device.');
      Alert.alert('Error', 'Bluetooth Classic is not available on this device.');
    }
  };

  const requestPermissions = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        ]);
        return Object.values(granted).every(status => status === PermissionsAndroid.RESULTS.GRANTED);
      } catch (err) {
        console.warn(err);
        Alert.alert('Permission Error', 'Failed to obtain Bluetooth permissions.');
        return false;
      }
    }
    return true;
  };

  const startDeviceDiscovery = async () => {
    console.log('Searching for devices...');
    setScanning(true);
    try {
      const pairedDevices = await RNBluetoothClassic.getBondedDevices();
      setPaired(pairedDevices);
      const discoveredDevices = await RNBluetoothClassic.startDiscovery();
      setDevices(discoveredDevices);
    } catch (error) {
      console.error('Error during device discovery:', error);
      Alert.alert('Discovery Error', 'An error occurred during device discovery.');
    } finally {
      setScanning(false);
    }
  };

  const connectToDevice = async (device: BluetoothDevice) => {
    try {
      await device.connect({
        connectorType: 'rfcomm',
        DELIMITER: '\n',
        DEVICE_CHARSET: Platform.OS === 'ios' ? 1536 : 'utf-8',
      });
      setSelectedDevice(device);
      setIsConnected(true);
      monitorData(device);
    } catch (error) {
      console.error('Error connecting to device:', error);
      Alert.alert('Connection Error', 'Failed to connect to the device.');
    }
  };

  const monitorData = (device: BluetoothDevice) => {
    let dataReceived = false;
    device.onDataReceived(({ data }) => {
      console.log('Raw Data Received:', data);
      parseData(data);
      dataReceived = true;
    });
    setTimeout(() => {
      if (!dataReceived) {
        Alert.alert('No Data', 'This device is not sending any data.');
        disconnect();
      }
    }, 5000);
  };

  const parseData = (data: string) => {
    const numberRegex = /(?<=:\s)\d+(\.\d+)?/g;
    const matches = data.match(numberRegex);
    const values = matches ? matches.map(Number).filter(value => !isNaN(value)) : [];
    console.log('Converted values:', values);
    console.log('Type of values:', typeof values);
    console.log('Type of values[0]:', typeof values[0]);

    if (values.length >= 2) {
      setAzimuthData(prevData => {
        const updatedData = [...prevData, values[0]];
        return updatedData.length > maxDataPoints
          ? updatedData.slice(updatedData.length - maxDataPoints)
          : updatedData;
      });
      setBearingData(prevData => {
        const updatedData = [...prevData, values[1]];
        return updatedData.length > maxDataPoints
          ? updatedData.slice(updatedData.length - maxDataPoints)
          : updatedData;
      });
    }
  };

  const updateGraph = () => {
    const downsampledAzimuth = downsampleData(azimuthData, downsampleFactor);
    const downsampledBearing = downsampleData(bearingData, downsampleFactor);

    setAzimuthData(downsampledAzimuth);
    setBearingData(downsampledBearing);
  };

  const downsampleData = (dataArray, downsampleFactor) => {
    return dataArray.filter((_, index) => index % downsampleFactor === 0);
  };

  useEffect(() => {
    const initializeBluetooth = async () => {
      await checkBluetoothEnabled();
      const permissionsGranted = await requestPermissions();
      if (permissionsGranted) {
        startDeviceDiscovery();
      } else {
        console.log('Bluetooth permissions denied');
        Alert.alert('Permissions Denied', 'Bluetooth permissions are required to use this app.');
      }
    };
    initializeBluetooth();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      updateGraph(); // Update the graph with downsampled data
    }, 1000); // Update every second (adjust interval as needed)

    return () => clearInterval(interval); // Clean up interval on unmount
  }, [azimuthData, bearingData]);

  const disconnect = async () => {
    if (selectedDevice && isConnected) {
      try {
        await selectedDevice.disconnect();
        setSelectedDevice(undefined);
        setIsConnected(false);
      } catch (error) {
        console.error('Error disconnecting:', error);
        Alert.alert('Error', 'Failed to disconnect from the device.');
      }
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.headerText}>Bluetooth Data Display</Text>
      <View style={styles.content}>
        {!isConnected && (
          <>
            <TouchableOpacity
              onPress={startDeviceDiscovery}
              style={[styles.deviceButton, scanning && styles.disabledButton]}
              disabled={scanning}
            >
              <Text style={styles.scanButtonText}>
                {scanning ? 'Scanning...' : 'SCAN'}
              </Text>
            </TouchableOpacity>
            {scanning && <ActivityIndicator size="large" color="#008CBA" />}
            <Text>Paired Devices:</Text>
            {paired.map((pair, i) => (
              <View key={i} style={styles.deviceContainer}>
                <View style={styles.deviceItem}>
                  <Text style={styles.deviceName}>{pair.name}</Text>
                  <Text style={styles.deviceInfo}>{pair.id}</Text>
                </View>
                <TouchableOpacity
                  onPress={() => connectToDevice(pair)}
                  style={styles.connectButton}
                >
                  <Text style={styles.connectButtonText}>Connect</Text>
                </TouchableOpacity>
              </View>
            ))}
            <Text>Available Devices:</Text>
            {devices.map((device, i) => (
              <View key={i} style={styles.deviceContainer}>
                <View style={styles.deviceItem}>
                  <Text style={styles.deviceName}>{device.name}</Text>
                  <Text style={styles.deviceInfo}>{device.id}</Text>
                </View>
                <TouchableOpacity
                  onPress={() => connectToDevice(device)}
                  style={styles.connectButton}
                >
                  <Text style={styles.connectButtonText}>Connect</Text>
                </TouchableOpacity>
              </View>
            ))}
          </>
        )}
        {isConnected && (
          <View style={styles.dataContainer}>
            <TouchableOpacity
              onPress={disconnect}
              style={styles.deviceButton}
            >
              <Text style={styles.disconnectButtonText}>Disconnect</Text>
            </TouchableOpacity>
            <View style={styles.chartContainer}>
              <Text style={styles.axisLabel}>Azimuth Data</Text>
              <VictoryChart width={width * 0.9} height={height * 0.3} theme={VictoryTheme.material}>
                <VictoryLine
                  data={azimuthData.map((value, index) => ({ x: index, y: value }))}
                  style={{ data: { stroke: 'purple' } }}
                />
              </VictoryChart>
            </View>
            <View style={styles.chartContainer}>
              <Text style={styles.axisLabel}>Bearing Data</Text>
              <VictoryChart width={width * 0.9} height={height * 0.3} theme={VictoryTheme.material}>
                <VictoryLine
                  data={bearingData.map((value, index) => ({ x: index, y: value }))}
                  style={{ data: { stroke: 'orange' } }}
                />
              </VictoryChart>
            </View>
          </View>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  content: {
    flex: 1,
    width: width * 0.95,
    alignItems: 'center',
  },
  deviceButton: {
    backgroundColor: '#008CBA',
    padding: 10,
    borderRadius: 5,
    margin: 10,
  },
  scanButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  deviceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  deviceItem: {
    flex: 1,
  },
  deviceName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  deviceInfo: {
    fontSize: 14,
  },
  connectButton: {
    backgroundColor: '#4CAF50',
    padding: 5,
    borderRadius: 5,
    marginLeft: 10,
  },
  connectButtonText: {
    color: '#fff',
  },
  dataContainer: {
    flex: 1,
    width: width * 0.95,
    alignItems: 'center',
  },
  disconnectButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  chartContainer: {
    marginVertical: 10,
    width: '100%',
    alignItems: 'center',
  },
  axisLabel: {
    fontSize: 18,
    marginVertical: 5,
  },
});

export default App;


import React, { useEffect, useState, useCallback } from 'react';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { View, Text, TouchableOpacity, FlatList, StyleSheet, Dimensions } from 'react-native';
import { VictoryChart, VictoryLine, VictoryTheme, VictoryAxis } from 'victory-native';
import { RouteProp } from '@react-navigation/native';

type RootStackParamList = {
  Home: undefined;
  DataDisplay: { sensorType: SensorType };
};

type SensorType = 'Gyroscope' | 'Accelerometer';
type SensorData = {
  x: number;
  y: number;
  z: number;
};

const Stack = createStackNavigator<RootStackParamList>();
const { height: screenHeight, width: screenWidth } = Dimensions.get('window');

const MAX_DATA_POINTS = 100; // More data points for smoother graphs

const generateRandomMPU6050Data = (dataType: SensorType): SensorData => {
  const randomValue = (min: number, max: number) => 
    Number((Math.random() * (max - min) + min).toFixed(3));

  switch (dataType) {
    case 'Accelerometer':
      return {
        x: randomValue(-1, 1),
        y: randomValue(-1, 1),
        z: randomValue(-1, 1),
      };
    case 'Gyroscope':
      return {
        x: randomValue(-125, 125),
        y: randomValue(-125, 125),
        z: randomValue(-125, 125),
      };
  }
};

const HomeScreen: React.FC<{ navigation: any }> = ({ navigation }) => {
  const sensors: SensorType[] = ['Gyroscope', 'Accelerometer'];

  return (
    <View style={darkStyles.container}>
      <Text style={darkStyles.title}>Select Sensor Type</Text>
      <FlatList
        data={sensors}
        keyExtractor={(item) => item}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={darkStyles.button}
            onPress={() => navigation.navigate('DataDisplay', { sensorType: item })}
          >
            <Text style={darkStyles.buttonText}>{item}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
};

const DataDisplayScreen: React.FC<{ route: { params: { sensorType: SensorType } } }> = ({ route }) => {
  const { sensorType } = route.params;
  const [sensorData, setSensorData] = useState<SensorData>(generateRandomMPU6050Data(sensorType));
  const [dataHistory, setDataHistory] = useState<{ x: number[], y: number[], z: number[] }>({
    x: [], y: [], z: []
  });

  const updateData = useCallback(() => {
    const newData = generateRandomMPU6050Data(sensorType);
    setSensorData(newData);

    setDataHistory(prev => ({
      x: [...prev.x, newData.x].slice(-MAX_DATA_POINTS),
      y: [...prev.y, newData.y].slice(-MAX_DATA_POINTS),
      z: [...prev.z, newData.z].slice(-MAX_DATA_POINTS),
    }));
  }, [sensorType]);

  useEffect(() => {
    const interval = setInterval(updateData, 100); // Fast refresh rate for smoother graph
    return () => clearInterval(interval);
  }, [updateData]);

  const renderChart = (data: number[], label: string, currentValue: number) => (
    <View style={darkStyles.chartContainer}>
      <Text style={[darkStyles.axisLabel, { color: '#FFA500' }]}>{label} Axis</Text>
      <VictoryChart
        theme={VictoryTheme.material}
        width={screenWidth}
        height={screenHeight * 0.25}
        padding={{ top: 0, bottom: 0, left: 0, right: 0 }}
        domain={{ y: sensorType === 'Accelerometer' ? [-1, 1] : [-125, 125] }}
      >
        <VictoryAxis
          dependentAxis
          tickFormat={() => ''}
          style={{
            axis: { stroke: "transparent" }, // Remove axis line
            grid: { stroke: '#808080', strokeDasharray: '4' }, // Stable grid lines in grey
            tickLabels: { fill: '#FFA500', fontSize: 10 },
          }}
        />
        <VictoryAxis
          tickFormat={() => ''}
          style={{
            axis: { stroke: "transparent" }, // Remove axis line
            grid: { stroke: '#808080', strokeDasharray: '4' }, // Stable grid lines in grey
            ticks: { stroke: "transparent" },
            tickLabels: { fill: "transparent" },
          }}
        />
        <VictoryLine
          data={data.map((y, index) => ({ x: index, y }))}
          style={{
            data: { stroke: '#FFA500', strokeWidth: 2 },
          }}
          interpolation="natural"  // Smooth the graph
        />
      </VictoryChart>
      <Text style={darkStyles.currentValue}>{currentValue.toFixed(3)}</Text>
    </View>
  );

  return (
    <View style={darkStyles.container}>
      {renderChart(dataHistory.x, 'X', sensorData.x)}
      {renderChart(dataHistory.y, 'Y', sensorData.y)}
      {renderChart(dataHistory.z, 'Z', sensorData.z)}
    </View>
  );
};

const App: React.FC = () => (
  <SafeAreaProvider>
    <NavigationContainer>
      <Stack.Navigator
        initialRouteName="Home"
        screenOptions={{
          headerStyle: { backgroundColor: '#121212' },
          headerTintColor: '#ffffff',
          headerTitleStyle: { fontWeight: 'bold' },
        }}
      >
        <Stack.Screen 
          name="Home" 
          component={HomeScreen} 
          options={{ title: 'Etherson' }} 
        />
        <Stack.Screen 
          name="DataDisplay" 
          component={DataDisplayScreen}
          options={({ route }) => ({ 
            title: `${route.params.sensorType} Data`
          })}
        />
      </Stack.Navigator>
    </NavigationContainer>
  </SafeAreaProvider>
);

const darkStyles = StyleSheet.create({
  container: {  
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#121212',
    padding: 1,
  },
  title: {
    fontSize: 24,
    marginVertical: 10,
    fontWeight: 'bold',
    fontStyle: 'italic',
    fontFamily: 'Times New Roman',
    color: '#ffffff',
  },
  button: {
    backgroundColor: '#1E88E5',
    padding: 15,
    borderRadius: 5,
    marginVertical: 10,
    width: 200,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
  },
  chartContainer: {
    padding: 0,
    width: '100%',
    height: screenHeight * 0.28,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#1E1E1E',
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    elevation: 4,
  },
  axisLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    position: 'absolute',
    top: 5,
    left: 10,
    color: '#1E88E5', // Orange color for axis labels
  },
  currentValue: {
    position: 'absolute',
    top: 5,
    right: 10,
    fontSize: 14,
    fontWeight: 'bold',
    backgroundColor: '#333333', // Dark background for current value
    padding: 5,
    borderRadius: 5,
    color: '#FFA500', // Orange color for current value text
  },
});

export default App;


// import React, { useState, useEffect } from 'react';
// import { SafeAreaProvider } from 'react-native-safe-area-context';
// import { NavigationContainer } from '@react-navigation/native';
// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
// import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
// import DataDisplayScreen from './screens/DataDisplayScreen';
// import SplashScreen from './screens/SplashScreen';

// type TabParamList = {
//   Gyroscope: undefined;
//   Accelerometer: undefined;
//   Temperature: undefined;
// };

// const Tab = createBottomTabNavigator<TabParamList>();

// const GyroscopeScreen = () => <DataDisplayScreen sensorType="Gyroscope" />;
// const AccelerometerScreen = () => <DataDisplayScreen sensorType="Accelerometer" />;
// const TemperatureScreen = () => <DataDisplayScreen sensorType="Temperature" />;

// const App: React.FC = () => {
//   const [isLoading, setIsLoading] = useState(true);

//   useEffect(() => {
//     setTimeout(() => {
//       setIsLoading(false);
//     }, 2000); // Show splash screen for 2 seconds
//   }, []);

//   if (isLoading) {
//     return <SplashScreen />;
//   }

//   return (
//     <SafeAreaProvider>
//       <NavigationContainer>
//         <Tab.Navigator
//           screenOptions={({ route }) => ({
//             tabBarStyle: { backgroundColor: '#001F3F' },
//             tabBarActiveTintColor: '#2475B0',  // Electric blue
//             tabBarInactiveTintColor: '#FFFFFF',
//             headerStyle: { backgroundColor: '#0047AB' },
//             headerTintColor: '#FFFFFF',
//             headerTitleStyle: { fontWeight: 'bold' },
//             tabBarIcon: ({ focused, color, size }) => {
//               let iconName;
//               if (route.name === 'Gyroscope') {
//                 iconName = focused ? 'rotate-3d' : 'rotate-3d-variant';
//               } else if (route.name === 'Accelerometer') {
//                 iconName = focused ? 'speedometer' : 'speedometer-medium';
//               } else if (route.name === 'Temperature') {
//                 iconName = focused ? 'thermometer' : 'thermometer-lines';
//               }
//               return <MaterialCommunityIcons name={iconName || 'alert'} size={size} color={color} />;
//             },
//           })}
//         >
//           <Tab.Screen 
//             name="Gyroscope" 
//             component={GyroscopeScreen}
//             options={{ title: 'Gyroscope' }}
//           />
//           <Tab.Screen 
//             name="Accelerometer" 
//             component={AccelerometerScreen}
//             options={{ title: 'Accelerometer' }}
//           />
//           <Tab.Screen 
//             name="Temperature" 
//             component={TemperatureScreen}
//             options={{ title: 'Temperature' }}
//           />
//         </Tab.Navigator>
//       </NavigationContainer>
//     </SafeAreaProvider>
//   );
// };

// // export default App;
